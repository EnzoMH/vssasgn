🔄 VSS 창고관리 시스템 - Git Clone 방식 실행 To-Do List

================================================
📋 GIT CLONE 방식 실행 가이드 (전통적 방식)
================================================

✅ 1. 시스템 환경 준비
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
□ Python 3.11.9 설치 확인
  - Windows: python.org에서 Python 3.11.9 다운로드
  - macOS: pyenv 또는 공식 설치 파일 사용
  - Linux: pyenv 또는 패키지 매니저 사용
  - 설치 확인: `python --version` (정확히 3.11.9 확인)

□ pip 업그레이드
  ```
  python -m pip install --upgrade pip
  ```

□ Git 설치 확인
  ```
  git --version
  ```

□ Google Gemini API 키 발급
  - https://makersuite.google.com/app/apikey 접속
  - API 키 생성 (최소 1개, 최대 4개 권장)
  - Rate limit 대비용 여러 키 준비


✅ 2. 프로젝트 다운로드 및 설정
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
□ 저장소 클론
  ```
  git clone https://github.com/EnzoMH/vssasgn.git
  cd vssasgn
  ```

□ 프로젝트 구조 확인
  ```
  ls -la
  # 필수 확인: backend/, rawdata/, requirements.txt, env_example.txt
  ```

□ 백엔드 디렉토리로 이동
  ```
  cd backend
  ```


✅ 3. Python 가상환경 설정 (강력 권장)
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
□ 가상환경 생성
  ```
  # Windows
  python -m venv venv
  
  # macOS/Linux
  python3 -m venv venv
  ```

□ 가상환경 활성화
  ```
  # Windows
  venv\Scripts\activate
  
  # macOS/Linux
  source venv/bin/activate
  ```

□ 가상환경 활성화 확인
  ```
  which python  # macOS/Linux
  where python  # Windows
  # venv 경로가 표시되어야 함
  ```


✅ 4. 의존성 패키지 설치
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
□ requirements.txt 확인
  ```
  cat ../requirements.txt
  ```

□ 패키지 설치 (시간 소요 주의: 10-20분)
  ```
  pip install -r ../requirements.txt
  ```

□ 핵심 패키지 개별 설치 확인 (문제 발생 시)
  ```
  pip install fastapi uvicorn
  pip install pandas scikit-learn
  pip install chromadb sentence-transformers
  pip install google-generativeai
  pip install python-dotenv python-multipart
  pip install PyMuPDF xgboost
  ```

□ 설치 확인
  ```
  pip list | grep -E "fastapi|chromadb|sentence|google"
  ```


✅ 5. 환경변수 설정
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
□ .env 파일 생성
  ```
  cd ..  # 프로젝트 루트로 이동
  cp env_example.txt .env
  ```

□ .env 파일 편집
  ```
  # 텍스트 에디터로 .env 파일 열기
  # VS Code: code .env
  # Nano: nano .env
  # Vim: vim .env
  
  # 내용 수정:
  GEMINI_API_KEY_1=your_actual_api_key_here
  GEMINI_API_KEY_2=your_second_api_key_here
  GEMINI_API_KEY_3=your_third_api_key_here
  GEMINI_API_KEY_4=your_fourth_api_key_here
  ```

□ 환경변수 로드 확인
  ```
  cd backend
  python -c "import os; from dotenv import load_dotenv; load_dotenv('../.env'); print('API 키 로드됨:', bool(os.getenv('GEMINI_API_KEY_1')))"
  ```


✅ 6. 데이터 준비 및 확인
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
□ rawdata 디렉토리 확인
  ```
  ls -la ../rawdata/
  # Excel 및 CSV 파일들이 있는지 확인
  ```

□ 데이터 파일 형식 확인
  ```
  # 최소 필요 파일들:
  # - 입고데이터_*.xlsx 또는 InboundData_*.csv
  # - 출고데이터_*.xlsx 또는 OutboundData_*.csv  
  # - 상품데이터.xlsx 또는 product_data.csv
  ```

□ ChromaDB 저장소 디렉토리 생성
  ```
  mkdir -p chromadb_storage
  ```


✅ 7. 서버 실행 및 초기화
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
□ FastAPI 서버 실행
  ```
  python -m uvicorn app.main:app --reload --port 8000
  ```

□ 서버 시작 로그 확인
  - □ "✅ .env 파일 로드됨" 메시지 확인
  - □ "✅ 로드된 API 키" 메시지 확인
  - □ "서버 시작 이벤트 발생: 데이터 로딩 시작" 확인
  - □ "데이터 로딩 완료" 확인
  - □ "벡터 데이터베이스 인덱싱 시작" 확인
  - □ "✅ 벡터 데이터베이스 인덱싱 완료" 확인 (최대 5-10분 소요)

□ 서버 접속 확인
  ```
  # 새 터미널에서
  curl http://localhost:8000/api/dashboard/kpi
  ```


✅ 8. 웹 애플리케이션 테스트
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
□ 브라우저에서 접속
  ```
  http://localhost:8000
  ```

□ 대시보드 기능 테스트
  - □ KPI 카드 4개 정상 표시 확인
  - □ 차트 4개 (랙별 재고, 일별 트렌드, 제품 분포, 이상 탐지) 렌더링 확인
  - □ 차트 데이터가 "Loading..." 상태가 아닌 실제 데이터 표시 확인

□ AI 채팅 기능 테스트
  - □ 채팅 버튼 클릭하여 모달 열기
  - □ "총 재고량은 얼마인가요?" 입력
  - □ AI 응답 수신 확인 (몇 초 소요 가능)
  - □ "랙별 재고 현황은?" 질문으로 추가 테스트

□ AI 차트 생성 테스트
  - □ "최근 7일간 입고량을 막대차트로 보여줘" 입력
  - □ 실제 차트 생성 확인
  - □ "공급업체별 입고량을 파이차트로 보여줘" 추가 테스트


✅ 9. 고급 기능 테스트 (선택사항)
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
□ ML 모델 테스트
  - □ "수요 예측" 버튼 클릭
  - □ "제품 클러스터링" 버튼 클릭
  - □ "이상 탐지" 버튼 클릭

□ 파일 업로드 테스트
  - □ "파일 업로드" 버튼으로 Excel/CSV 파일 업로드
  - □ 업로드 후 데이터 반영 확인

□ 벡터 DB 상태 확인
  ```
  curl http://localhost:8000/api/vector-db/status
  ```

□ 독립 분석 스크립트 실행 (선택사항)
  ```
  # 새 터미널에서
  cd vssasgn
  python analyze_data.py
  ```


✅ 10. 문제 해결 가이드
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
□ 모듈 import 오류 발생 시
  ```
  pip install --upgrade [패키지명]
  # 또는 패키지 재설치
  pip uninstall [패키지명]
  pip install [패키지명]
  ```

□ ChromaDB 오류 발생 시
  ```
  pip install chromadb --upgrade
  # 또는 저장소 초기화
  rm -rf backend/chromadb_storage
  mkdir backend/chromadb_storage
  ```

□ Sentence-transformers 모델 다운로드 오류 시
  ```
  # 인터넷 연결 확인 후
  python -c "from sentence_transformers import SentenceTransformer; SentenceTransformer('all-MiniLM-L6-v2')"
  ```

□ Gemini API 오류 시
  - □ API 키 유효성 확인
  - □ Rate limit 확인 (여러 키 사용)
  - □ .env 파일 경로 및 형식 확인

□ 포트 충돌 시
  ```
  # 다른 포트 사용
  python -m uvicorn app.main:app --reload --port 8001
  ```

□ 가상환경 문제 시
  ```
  deactivate
  rm -rf venv
  python -m venv venv
  source venv/bin/activate  # 또는 venv\Scripts\activate
  pip install -r requirements.txt
  ```


✅ 11. 성능 최적화 (선택사항)
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
□ GPU 가속 사용 (NVIDIA GPU 있는 경우)
  ```
  pip install sentence-transformers[gpu]
  # 또는
  pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu118
  ```

□ 메모리 사용량 모니터링
  ```
  # 새 터미널에서
  top -p $(pgrep -f "uvicorn")
  ```

□ 데이터 캐싱 확인
  - □ 첫 실행 후 chromadb_storage/ 디렉토리에 파일 생성 확인
  - □ 재시작 시 "기존 벡터 데이터 사용" 메시지 확인


📝 예상 소요 시간: 30-60분 (패키지 설치 시간 포함)
🎯 장점: 완전한 제어권, 디버깅 용이, 개발 환경과 통합
⚠️ 주의사항:
- Python 버전 정확히 맞춰야 함 (3.11.9)
- 의존성 충돌 가능성 (가상환경 필수)
- 시스템별 컴파일 오류 가능성
- 첫 실행 시 모델 다운로드로 긴 대기시간

🚀 성공 지표:
- 서버 로그에서 "벡터 데이터베이스 인덱싱 완료" 확인
- http://localhost:8000 접속 시 대시보드 정상 표시
- AI 채팅에서 실제 데이터 기반 답변 반환
- 차트 생성 요청 시 Chart.js 차트 정상 렌더링

💡 개발자용 추가 팁:
- VS Code Extensions: Python, Pylance, FastAPI
- 디버깅: uvicorn --reload 사용으로 코드 변경 시 자동 재시작
- 로그 레벨: app/main.py에서 logging.DEBUG로 변경 가능