🐳 VSS 창고관리 시스템 - Docker 실행 To-Do List

================================================
📋 DOCKER 방식 실행 가이드 (추천)
================================================

✅ 1. 사전 준비 단계
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
□ Docker Desktop 설치 확인
  - Windows: Docker Desktop for Windows 다운로드
  - macOS: Docker Desktop for Mac 다운로드  
  - Linux: Docker Engine 설치
  - 설치 확인: `docker --version` 명령어 실행

□ Git 설치 확인
  - `git --version` 명령어로 확인
  - 없으면 Git 공식 사이트에서 다운로드

□ Google Gemini API 키 발급
  - https://makersuite.google.com/app/apikey 접속
  - API 키 생성 (최소 1개, 최대 4개 권장)
  - API 키 안전하게 보관


✅ 2. 프로젝트 다운로드
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
□ 저장소 클론
  ```
  git clone https://github.com/EnzoMH/vssasgn.git
  cd vssasgn
  ```

□ 프로젝트 구조 확인
  ```
  ls -la
  # 확인할 파일들: backend/, rawdata/, requirements.txt, env_example.txt
  ```


✅ 3. Dockerfile 생성 (프로젝트에 없는 경우)
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
□ 프로젝트 루트에 Dockerfile 생성
  ```dockerfile
  FROM python:3.11.9-slim

  # 시스템 패키지 설치
  RUN apt-get update && apt-get install -y \
      build-essential \
      curl \
      && rm -rf /var/lib/apt/lists/*

  WORKDIR /app

  # 의존성 파일 복사 및 설치
  COPY requirements.txt .
  RUN pip install --no-cache-dir -r requirements.txt

  # 애플리케이션 코드 복사
  COPY backend/ ./backend/
  COPY rawdata/ ./rawdata/
  COPY env_example.txt .

  # ChromaDB 저장소 디렉토리 생성
  RUN mkdir -p ./backend/chromadb_storage

  WORKDIR /app/backend

  # 포트 노출
  EXPOSE 8000

  # 서버 실행
  CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]
  ```

□ .dockerignore 파일 생성
  ```
  .git
  .env
  __pycache__
  *.pyc
  .pytest_cache
  node_modules
  ```


✅ 4. 환경변수 설정
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
□ .env 파일 생성
  ```
  cp env_example.txt .env
  ```

□ .env 파일 편집
  ```
  # 발급받은 API 키로 수정
  GEMINI_API_KEY_1=your_actual_api_key_here
  GEMINI_API_KEY_2=your_second_api_key_here
  GEMINI_API_KEY_3=your_third_api_key_here
  GEMINI_API_KEY_4=your_fourth_api_key_here
  ```


✅ 5. Docker 이미지 빌드
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
□ Docker 이미지 빌드
  ```
  docker build -t vss-warehouse .
  ```

□ 빌드 성공 확인
  ```
  docker images | grep vss-warehouse
  ```


✅ 6. Docker 컨테이너 실행
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
□ 컨테이너 실행 (환경변수 포함)
  ```
  docker run -d \
    --name vss-warehouse-app \
    -p 8000:8000 \
    --env-file .env \
    -v $(pwd)/rawdata:/app/rawdata \
    -v $(pwd)/backend/chromadb_storage:/app/backend/chromadb_storage \
    vss-warehouse
  ```

□ 컨테이너 상태 확인
  ```
  docker ps
  docker logs vss-warehouse-app
  ```


✅ 7. 애플리케이션 접속 및 테스트
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
□ 웹 브라우저에서 접속
  ```
  http://localhost:8000
  ```

□ 기본 기능 테스트
  - □ 대시보드 로딩 확인
  - □ KPI 지표 표시 확인
  - □ AI 채팅 기능 테스트: "총 재고량은 얼마인가요?"
  - □ 차트 생성 테스트: "최근 입고량을 막대차트로 보여줘"
  - □ 벡터 DB 상태 확인: 서버 로그에서 "벡터 데이터베이스 인덱싱 완료" 메시지 확인

□ API 엔드포인트 테스트
  ```
  curl http://localhost:8000/api/dashboard/kpi
  curl http://localhost:8000/api/vector-db/status
  ```


✅ 8. 문제 해결 (선택사항)
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
□ 로그 확인
  ```
  docker logs -f vss-warehouse-app
  ```

□ 컨테이너 내부 접속 (디버깅)
  ```
  docker exec -it vss-warehouse-app /bin/bash
  ```

□ 컨테이너 재시작
  ```
  docker restart vss-warehouse-app
  ```

□ 컨테이너 정리
  ```
  docker stop vss-warehouse-app
  docker rm vss-warehouse-app
  docker rmi vss-warehouse
  ```


✅ 9. Docker Compose 방식 (고급 - 선택사항)
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
□ docker-compose.yml 생성
  ```yaml
  version: '3.8'
  services:
    warehouse:
      build: .
      ports:
        - "8000:8000"
      env_file:
        - .env
      volumes:
        - ./rawdata:/app/rawdata
        - ./backend/chromadb_storage:/app/backend/chromadb_storage
      restart: unless-stopped
  ```

□ Docker Compose 실행
  ```
  docker-compose up -d
  docker-compose logs -f
  ```


📝 예상 소요 시간: 20-30분
🎯 장점: 환경 격리, 일관된 실행 환경, 원클릭 배포
⚠️ 주의사항: 
- Docker Desktop이 실행되어 있어야 함
- API 키는 절대 public 저장소에 업로드하지 말 것
- 첫 실행 시 sentence-transformers 모델 다운로드로 5-10분 소요될 수 있음

🚀 성공 지표: 
- http://localhost:8000 접속 시 대시보드 정상 표시
- AI 채팅에서 "총 재고량은 얼마인가요?" 질문 시 정확한 답변 반환
- 차트 생성 요청 시 실제 차트 렌더링 확인